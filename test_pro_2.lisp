(defun bin-search (obj vec)
  (let ((len (length vec)))
    (and (not (zerop len))
	 (finder obj vec 0 (- len 1)))))

;存在bug，无法打印
(defun finder (obj vec start end)
  ;(format t "~A~%" (subseq vec start (+ end 1))
	  (let ((range (- end start)))
	    (if (zerop range)
		(if (eql obj (aref vec start))
		    obj
		    nil)
		(let ((mid (+ start (round (/ range 2)))))
		  (let ((obj2 (aref vec mid)))
		    (if (< obj obj2)
			(finder obj vec start (- mid 1))
			(if (> obj obj2)
			    (finder obj vec start (- mid 1))
			    (if (> obj obj2)
				(finder obj vec (+ mid 1) end)
				obj)))))))
	  (format t "~A~%" (subseq vec start (+ end 1))))

(defun mirror_z? (s)
  (let ((len (length s)))
    (and (evenp len)
	 (do ((forward 0 (+ forward 1))
	      (back (- len 1) (- back 1)))
	     ((or (> forward back)
		  (not (eql (elt s forward)
			    (elt s back))))
	      (> forward back))))))


(defun tokens (str test start)
  (let ((p1 (position-if test str :start start)))
    (if p1 
	(let ((p2 (position-if #'(lambda (c)
				   (not (funcall test c)))
			       str :start p1)))
	  (cons (subseq str p1 p2)
		(if p2
		    (tokens str test p2)
		    nil)))
	nil)))

(defun constituent (c)
  (and (graphic-char-p c)
       (not (char= c #\ ))))
